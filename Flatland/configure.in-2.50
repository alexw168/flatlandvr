dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.50)
AC_INIT(Flatland, 0.1, /dev/null)
AC_CONFIG_SRCDIR([src/gheader.h])
AC_CONFIG_HEADER([include/config.h])

dnl The smr packages of macros included here is courtesy of Matthew D.
dnl Langston and Steve Robbins.  The file "smr.m4" has been included in its
dnl entirety.  NOTE: I had to comment out all references to "AC_HELP_STRING",
dnl since there doesn't appear to be any such thing in version 2.13 of
dnl Autoconf.

dnl ####################### -*- Mode: M4 -*- ###########################
dnl smr.m4 -- 
dnl 
dnl Copyright (C) 1999 Matthew D. Langston <langston@SLAC.Stanford.EDU>
dnl Copyright (C) 1998 Steve Robbins <stever@cs.mcgill.ca>
dnl
dnl This file is free software; you can redistribute it and/or modify it
dnl under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl
dnl This file is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this file; if not, write to:
dnl
dnl   Free Software Foundation, Inc.
dnl   Suite 330
dnl   59 Temple Place
dnl   Boston, MA 02111-1307, USA.
dnl ####################################################################


dnl NOTE: The macros in this file are extensively documented in the
dnl       accompanying `smr_macros.texi' Texinfo file.  Please see the
dnl       Texinfo documentation for the definitive specification of how
dnl       these macros are supposed to work.  If the macros work
dnl       differently than the Texinfo documentation says they should,
dnl       then the macros (and not the Texinfo documentation) has the
dnl       bug(s).

dnl This is a convenient macro which translates illegal characters for
dnl bourne shell variables into legal characters.  It has the same
dnl functionality as sed 'y%./+-:%__p__%'.
AC_DEFUN([smr_safe_translation], [patsubst(patsubst([$1], [+], [p]), [./-:], [_])])

AC_DEFUN(smr_SWITCH,
[
  dnl Define convenient aliases for the arguments since there are so
  dnl many of them and I keep confusing myself whenever I have to edit
  dnl this macro.
  pushdef([smr_name],        $1)
  pushdef([smr_help_string], $2)
  pushdef([smr_default],     $3)
  pushdef([smr_yes_define],  $4)
  pushdef([smr_no_define],   $5)

  dnl Do some sanity checking of the arguments.
  ifelse([regexp(smr_default, [^\(yes\|no\)$])], -1, [AC_MSG_ERROR($0: third arg must be either yes or no)])

  dnl Create the help string
  pushdef([smr_lhs], [--ifelse(smr_default, yes, disable, enable)-smr_name])dnl
  pushdef([smr_rhs], [ifelse(smr_default, yes, disable, enable) smr_help_string (default is smr_default)])dnl

#  AC_HELP_STRING([smr_lhs], [smr_rhs], smr_name[]_switch_help_string)

  dnl Add the option to `configure --help'.  We don't need to supply the
  dnl 4th argument to AC_ARG_ENABLE (i.e. the code to set the default
  dnl value) because that is done below by AC_CACHE_CHECK.
  AC_ARG_ENABLE([smr_name],
                [$]smr_name[]_switch_help_string,
                smr_cv_enable_[]smr_name=$enableval)

  dnl We cache the result so that the user doesn't have to remember
  dnl which flags they passed to `configure'.
  AC_CACHE_CHECK([whether to enable smr_help_string],
                 smr_cv_enable_[]smr_name,
                 smr_cv_enable_[]smr_name=smr_default)

    ifelse(smr_yes_define, , , test x"[$]smr_cv_enable_[]smr_name" = xyes && AC_DEFINE(smr_yes_define))
    ifelse(smr_no_define, , ,  test x"[$]smr_cv_enable_[]smr_name" = xno  && AC_DEFINE(smr_no_define))

  dnl Sanity check the value assigned to smr_cv_enable_$1 to force it to
  dnl be either `yes' or `no'.
  if test ! x"[$]smr_cv_enable_[]smr_name" = xyes; then
    if test ! x"[$]smr_cv_enable_[]smr_name" = xno; then
      AC_MSG_ERROR([smr_lhs must be either yes or no])
    fi
  fi

  popdef([smr_name])
  popdef([smr_help_string])
  popdef([smr_default])
  popdef([smr_yes_define])
  popdef([smr_no_define])
  popdef([smr_lhs])
  popdef([smr_rhs])
])


AC_DEFUN(smr_ARG_WITHLIB,
[
  dnl Define convenient aliases for the arguments since there are so
  dnl many of them and I keep confusing myself whenever I have to edit
  dnl this macro.
  pushdef([smr_name],        $1)
  pushdef([smr_libname],     ifelse($2, , smr_name, $2))
  pushdef([smr_help_string], $3)
  pushdef([smr_safe_name],   smr_safe_translation(smr_name))

  dnl Create the help string
#  AC_HELP_STRING([--with-smr_safe_name-library[[=PATH]]],
#                 [use smr_name library ifelse(smr_help_string, , , (smr_help_string))],
#                 smr_safe_name[]_library_help_string)

  dnl Add the option to `configure --help'.  We don't need to supply the
  dnl 4th argument to AC_ARG_WITH (i.e. the code to set the default
  dnl value) because that is done below by AC_CACHE_CHECK.
  AC_ARG_WITH(smr_safe_name-library,
              [$]smr_safe_name[]_library_help_string,
              smr_cv_with_[]smr_safe_name[]_library=$withval)

  dnl We cache the result so that the user doesn't have to remember
  dnl which flags they passed to `configure'.
  AC_CACHE_CHECK([whether to use smr_name library],
                 smr_cv_with_[]smr_safe_name[]_library,
                 smr_cv_with_[]smr_safe_name[]_library=maybe)


  case x"[$]smr_cv_with_[]smr_safe_name[]_library" in
      xyes | xmaybe)
          smr_safe_name[]_LIBS="-l[]smr_libname"
          with_[]smr_safe_name=[$]smr_cv_with_[]smr_safe_name[]_library
          ;;
      xno)
          smr_safe_name[]_LIBS=
          with_[]smr_safe_name=no
          ;;
      *)
          if test -f "[$]smr_cv_with_[]smr_safe_name[]_library"; then
            smr_safe_name[]_LIBS=[$]smr_cv_with_[]smr_safe_name[]_library
          elif test -d "[$]smr_cv_with_[]smr_safe_name[]_library"; then
            smr_safe_name[]_LIBS="-L[$]smr_cv_with_[]smr_safe_name[]_library -l[]smr_libname"
          else
            AC_MSG_ERROR([argument must be boolean, file, or directory])
          fi
          with_[]smr_safe_name=yes
          ;;
  esac

  popdef([smr_name])
  popdef([smr_libname])
  popdef([smr_help_string])
  popdef([smr_safe_name])
])


AC_DEFUN(smr_ARG_WITHINCLUDES,
[
  dnl Define convenient aliases for the arguments since there are so
  dnl many of them and I keep confusing myself whenever I have to edit
  dnl this macro.
  pushdef([smr_name],        $1)
  pushdef([smr_header],      $2)
  pushdef([smr_extra_flags], $3)
  pushdef([smr_safe_name],   smr_safe_translation(smr_name))

  dnl Create the help string
#  AC_HELP_STRING([--with-smr_safe_name-includes[[=DIR]]],
#                 [set directory for smr_name headers],
#                 smr_safe_name[]_includes_help_string)

  dnl Add the option to `configure --help'.  We don't need to supply the
  dnl 4th argument to AC_ARG_WITH (i.e. the code to set the default
  dnl value) because that is done below by AC_CACHE_CHECK.
  AC_ARG_WITH(smr_safe_name-includes,
              [$]smr_safe_name[]_includes_help_string,
              smr_cv_with_[]smr_safe_name[]_includes=$withval)

  dnl We cache the result so that the user doesn't have to remember
  dnl which flags they passed to `configure'.
  AC_CACHE_CHECK([where to find the smr_name header files],
                 smr_cv_with_[]smr_safe_name[]_includes,
                 smr_cv_with_[]smr_safe_name[]_includes=)

  if test ! x"[$]smr_cv_with_[]smr_safe_name[]_includes" = x; then
    if test -d "[$]smr_cv_with_[]smr_safe_name[]_includes"; then
      smr_safe_name[]_CFLAGS="-I[$]smr_cv_with_[]smr_safe_name[]_includes"
    else
      AC_MSG_ERROR([argument must be a directory])
    fi
  else
    smr_safe_name[]_CFLAGS=
  fi

  dnl This bit of logic comes from the autoconf AC_PROG_CC macro.  We
  dnl need to put the given include directory into CPPFLAGS temporarily,
  dnl but then restore CPPFLAGS to its old value.
  smr_test_CPPFLAGS="${CPPFLAGS+set}"
  smr_save_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS [$]smr_safe_name[]_CFLAGS smr_extra_flags"

  dnl If the header file smr_header exists, then define
  dnl HAVE_[]smr_header (in all capitals).
  AC_CHECK_HEADERS([smr_header])

  if test x"$smr_test_CPPFLAGS" = xset; then
    CPPFLAGS=$smr_save_CPPFLAGS
  else
    unset CPPFLAGS
  fi

  popdef([smr_name])
  popdef([smr_header])
  popdef([smr_extra_flags])
  popdef([smr_safe_name])
])


AC_DEFUN(smr_CHECK_LIB,
[
  dnl Define convenient aliases for the arguments since there are so
  dnl many of them and I keep confusing myself whenever I have to edit
  dnl this macro.
  pushdef([smr_name],        $1)
  pushdef([smr_libname],     ifelse($2, , smr_name, $2))
  pushdef([smr_help_string], $3)
  pushdef([smr_function],    $4)
  pushdef([smr_header],      $5)
  pushdef([smr_extra_libs],  $6)
  pushdef([smr_extra_flags], $7)
  pushdef([smr_prototype],   $8)
  pushdef([smr_safe_name],   smr_safe_translation(smr_name))

  dnl Using sed here was a little bit easier to code than using
  dnl patsubst.
  smr_have_header=HAVE_`echo smr_header | sed 'y%abcdefghijklmnopqrstuvwxyz./+-:%ABCDEFGHIJKLMNOPQRSTUVWXYZ__p__%'`

  dnl Give the user (via "configure --help") an interface to specify
  dnl whether we should use the library or not, and possibly where we
  dnl should find it.
  smr_ARG_WITHLIB([smr_name], [smr_libname], [smr_help_string])

  if test ! x"$with_[]smr_safe_name" = xno; then

    # If we got this far, then the user didn't explicitly ask not to use
    # the library.

    dnl If the caller of smr_CHECK_LIB specified a header file for this
    dnl library, then give the user (via "configure --help") an
    dnl interface to specify where this header file can be found (if it
    dnl isn't found by the compiler by default).
    ifelse(smr_header, , , [smr_ARG_WITHINCLUDES(smr_name, smr_header, smr_extra_flags)])

    AC_CHECK_LIB(smr_libname,
                 smr_function,
                 smr_have_[]smr_safe_name[]_library=yes,
                 smr_have_[]smr_safe_name[]_library=no,
                 [$]smr_safe_name[]_CFLAGS [smr_extra_flags] [$]smr_safe_name[]_LIBS [smr_extra_libs],
                 [ifelse(smr_prototype, , , [[#]include <smr_header>])],
                 smr_prototype)

    dnl If the caller of smr_CHECK_LIB specified a header file for this
    dnl library, then we insist that it exists.  The shell variable
    dnl HAVE_[smr_name] (in all capitals) will be defined if the header
    dnl file was found.
    ifelse(smr_header, , , [test x"$smr_have_header" = x && AC_MSG_WARN([smr_header for smr_name library not found!])])

    if test x"[$]smr_have_[]smr_safe_name[]_library" = xyes; then
      AC_MSG_RESULT([using smr_name library])
    else
      smr_safe_name[]_LIBS=
      smr_safe_name[]_CFLAGS=

      if test x"$with_[]smr_safe_name" = xmaybe; then
        AC_MSG_RESULT([not using smr_name library])
      else
        AC_MSG_WARN([requested smr_name library not found!])
      fi
    fi
  fi

  popdef([smr_name])
  popdef([smr_libname])
  popdef([smr_help_string])
  popdef([smr_function])
  popdef([smr_header])
  popdef([smr_extra_libs])
  popdef([smr_extra_flags])
  popdef([smr_prototype])
  popdef([smr_safe_name])
])


dnl This is a small fix to the standard `AC_CHECK_LIB' macro which
dnl allows checking for C++ libraries.
dnl
dnl AC_CHECK_LIB(LIBRARY, FUNCTION [, ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND
dnl              [, OTHER-LIBRARIES [, INCLUDES [, FUNC-PTR-PROTOTYPE]]]]])
pushdef([AC_CHECK_LIB],
[AC_MSG_CHECKING([for $2 in -l$1])
dnl Use a cache variable name containing both the library and function name,
dnl because the test really is for library $1 defining function $2, not
dnl just for library $1.  Separate tests with the same $1 and different $2s
dnl may have different results.
ac_lib_var=`echo $1['_']$2 | sed 'y%./+-:%__p__%'`
AC_CACHE_VAL(ac_cv_lib_$ac_lib_var,
[ac_save_LIBS="$LIBS"
LIBS="-l$1 $5 $LIBS"
AC_TRY_LINK(dnl
ifelse([$6], , dnl If there is no INCLUDES then concoct our own declaration.
ifelse(_AC_LANG, [Fortran 77], ,
ifelse([$2], [main], , dnl Avoid conflicting decl of main.
[/* Override any gcc2 internal prototype to avoid an error.  */
]ifelse(_AC_LANG, [C++], [#ifdef __cplusplus
extern "C"
#endif
])dnl
[/* We use char because int might match the return type of a gcc2
    builtin and then its argument prototype would still apply.  */
char $2();
])), [$6]),
dnl If the user passed in a prototype for a pointer to FUNCTION
dnl (i.e. $7) then instead of just calling FUNCTION, construct a
dnl statement that takes the address of FUNCTION.  This is particularly
dnl helpful in checking for C++ class libraries.
ifelse([$7], ,[$2()], [$7 = &$2]),
	    eval "ac_cv_lib_$ac_lib_var=yes",
	    eval "ac_cv_lib_$ac_lib_var=no")
LIBS="$ac_save_LIBS"
])dnl
if eval "test \"`echo '$ac_cv_lib_'$ac_lib_var`\" = yes"; then
  AC_MSG_RESULT(yes)
  ifelse([$3], ,
[changequote(, )dnl
  ac_tr_lib=HAVE_LIB`echo $1 | sed -e 's/[^a-zA-Z0-9_]/_/g' \
    -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`
changequote([, ])dnl
  AC_DEFINE_UNQUOTED($ac_tr_lib)
  LIBS="-l$1 $LIBS"
], [$3])
else
  AC_MSG_RESULT(no)
ifelse([$4], , , [$4
])dnl
fi
])

dnl OK, enough of the smr stuff.  Now the Flatland configuration.

# Operating system, as determined by uname
OPSYS=`uname`
AC_SUBST(OPSYS)

# Full path to the top level directory
FLTOPDIR=`pwd`
AC_SUBST(FLTOPDIR)

# Library paths to always search:
LDFLAGS="-L$FLTOPDIR/$OPSYS -L/usr/local/lib"

# If this is an IRIX system, we can only compile with CC
if [[ $OPSYS = IRIX64 ]]; then
  CXX="CC"
  CC="cc"
fi
if [[ $OPSYS = IRIX32 ]]; then
  CXX="CC"
  CC="cc"
fi
if [[ $OPSYS = IRIX ]]; then
  CXX="CC"
  CC="cc"
fi

# Make the library directory, if neccessary
FLLIBDIR=lib/$OPSYS
if test ! -d $FLLIBDIR; then
  if test -e $FLLIBDIR; then
    rm -f $FLLIBDIR
  fi
  mkdir $FLLIBDIR
fi


dnl Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_LN_S

dnl Checks for paths
AC_PATH_XTRA

if test -n "$x_libraries"; then
  LDFLAGS="-L$x_libraries"
fi

dnl Checks for tools
AC_PROG_MAKE_SET

dnl Checks for libraries.
AC_CHECK_LIB(X11, XBell,,AC_MSG_ERROR(libX11 required))
AC_CHECK_LIB(Xi, XCloseDevice,,AC_MSG_ERROR(libXi required))
AC_CHECK_LIB(Xmu, XctCreate,,AC_MSG_ERROR(libXmu required))
AC_CHECK_LIB(m, cos)
AC_CHECK_LIB(GL, glEnable, [AC_DEFINE(HAVE_LIBGL)
  LIBS="-lGL $LIBS"
  have_libgl=1])
AC_CHECK_LIB(GLU, gluLookAt, [AC_DEFINE(HAVE_LIBGLU)
  LIBS="-lGLU $LIBS"
  have_libglu=1])
if test ! -n "$have_libgl"; then
  AC_CHECK_LIB(MesaGL, glEnable,,AC_MSG_ERROR(Must have either libGL or libMesaGL))
fi
if test ! -n "$have_libglu"; then
  AC_CHECK_LIB(MesaGLU, gluLookAt,,AC_MSG_ERROR(Must have either libGLU or libMesaGLU))
fi
AC_CHECK_LIB(dl, dlclose, [AC_DEFINE(HAVE_DL)
  LIBS="-ldl $LIBS"
  have_dl=1])
if test ! -n "$have_dl"; then
  AC_CHECK_LIB(c_r, dlclose,,AC_MSG_ERROR(Must have dl in either libdl or libc_r))
fi
dnl AC_CHECK_LIB(m, fesetenv,,AC_MSG_ERROR(libm required))
dnl AC_CHECK_LIB(glut, glutInit,,AC_MSG_ERROR(libglut required))
smr_CHECK_LIB(glut, , [gl Windowing System], glutInit, GL/glut.h)
AC_SUBST([glut_LIBS])
AC_SUBST([glut_CFLAGS])
if test -n "$glut_LIBS"; then
  have_glut=1
  AC_DEFINE(ENABLE_GLUT)
else
  echo "glut required" ; exit
fi
AC_SUBST([have_sdl])
dnl AC_CHECK_LIB(pthread, pthread_exit,,AC_MSG_ERROR(libpthread required))
dnl AC_CHECK_LIB(c_r, pthread_exit,,AC_MSG_ERROR(libc required))
AC_CHECK_LIB(pthread, pthread_exit, [AC_DEFINE(HAVE_PTHREAD)
  LIBS="-lpthread $LIBS"
  have_pthread=1])
if test ! -n "$have_pthread"; then
  AC_CHECK_LIB(c_r, pthread_exit,,AC_MSG_ERROR(Must have pthreads in either libpthread or libc_r))
fi
smr_CHECK_LIB(SDL, , [for sound and socket support], SDL_Init, SDL/SDL.h)
AC_SUBST([SDL_LIBS])
AC_SUBST([SDL_CFLAGS])
if test -n "$SDL_LIBS"; then
  have_sdl=1
  AC_DEFINE(ENABLE_SDL)
else
  have_sdl=0
fi
AC_SUBST([have_sdl])
dnl AC_SUBST(have_libsdl)
dnl have_libsdl=0
dnl AC_CHECK_LIB(SDL, SDL_Init, [AC_DEFINE(ENABLE_SDL)
dnl   LIBS="-lSDL $LIBS"
dnl   have_libsdl=1])

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h strings.h sys/ioctl.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_CHECK_FUNCS(mkdir select socket strdup strstr uname)
echo `uname` > current_arch

AC_OUTPUT(modules/DisplayFlatlandTree/Makefile modules/Stars/Makefile
src/sdl_netlib/Makefile modules/Makefile modules/Earth/Makefile
modules/MouseTrackerClient/Makefile modules/FlockTrackerClientTwo/Makefile
modules/ExtendedRangeFlockTrackerClient/Makefile
modules/FlockTrackerClient2/Makefile modules/FlockTrackerClient/Makefile
modules/ButtonClient/Makefile modules/TransformationNode/Makefile src/Makefile
modules/LocomotionClient/Makefile modules/UNMConsole/Makefile
modules/Head_Eyes/Makefile modules/Simple/Makefile
modules/MousePointer/Makefile modules/Wand/Makefile
modules/JoystickWand/Makefile modules/DodecahedronVessel/Makefile
make-include Makefile)
