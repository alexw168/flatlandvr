# File: Flatland.ExampleVarSub.config
#
# Example Flatland config file with environment variable substitutions.
#
# Usage: If $(VAR_NAME) is in a string it's value will be retrieved from
# the environment and substitued back into the string. If a variable is
# not defined in the environment the reader will exit. 
#
# To use the environment variable substition you must define it in your shell.
# For example, in this config file you must define FL_DIR. In c shell or t 
# shell enter the command: setenv FL_DIR /home/user-name/Flatland
# or for bash shell enter the command: export FL_DIR=/home/user-name/Flatland
#
# This allows you to have Flatland installed in an arbitrary directory, such
# as /usr/packages/Flatland. Then if you have added the /usr/packages/Flatland 
# directory to your PATH variable and FL_DIR is set to /usr/packages/Flatland,
# then Flatland can be run from an arbitrary directory.
#
# 09/18/2003
# 	Initial creation, Dave Hite.
#

BeginSystem
 name string Appville
 universe string standard
# configure the graphics
 window_def_filename string $(FL_DIR)/example.win
# window_def_filename string example-single.win
# window_def_filename string example-hmd.win
# window_def_filename string example-active-stereo.win
# window_def_filename string example-viewport-stereo.win
# configure the sound server 
 sound_server string localhost
 maxapps int 500
 maxsounds int 100
 max_open-close_sounds int 3
# configure the names of some important "internal" objects
 left_eye_name string LeftPupil
 right_eye_name string RightPupil
 center_eye_name string CenterPupil
 head_tracker_name string HeadTransformationNode
 tracker_client_name string TrackerClient
 head_name string Head
 glut_library string libglut.so.3
 joystick_device string /dev/input/js0
End
BeginBaseApp
# provides access to the button server
 name string ButtonClient
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libButtonClient.so
 connect string CenterOfTheUniverse
 universe string standard
 nparams int 1
 server_address string voice
End
BeginBaseApp
# This provides access to position tracking using flock-of-birds
 name string TrackerClient
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libFlockTrackerClient.so
 connect string CenterOfTheUniverse
 universe string standard
 nparams int 10
 port string /dev/ttyd2
 transducers int 3
 hemisphere string lower
 measurement_rate float 112.9
 x float 0.0
 y float 0.0
 z float 0.0
 roll float 0.0
 pitch float 0.0
 yaw float 0.0
End
BeginBaseApp
# This handles the transformations between the Head and the Vessel
 name string HeadTransformationNode
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libTransformationNode.so
 connect string TrackerClient
 universe string standard
 nparams int 10
# specify the default position of the head
 x float 0.0
 y float -0.2
 z float 0.3
 roll float 0.0
 pitch float 27.0
 yaw float 0.0
# specify the tracker to use
 tracker_client string TrackerClient
 transducer int 0
 move_child int 1
 use_tracking int 1
End
BeginBaseApp
 name string Head
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libHeadAndEyes.so
 connect string HeadTransformationNode
 universe string standard
 nparams int 10
# ** these settings are for use with the VR8 HMD as
# ** configured in the UNM vis lab.
# unfortunately the head tracker can not be placed 
# at the "center" of the head, so adjustments must
# be made to accomidate the tracking technology
 head_pitch float -27.0
 head_y float -0.07
 head_z float -0.05
# In order for stereo displays to work it is neccesary
# to seperate the viewpoints for the eyes, and turn them
# slightly inward so they "look" at a point in front of them.
# (eyes are placed relative to the "center" of the head,
# which is arbitrarily place at about the point 
# between the ears, a good place to orient audio.)
 left_eye_x float -0.05
 left_eye_z float -0.05
 left_eye_yaw float -0.3
 right_eye_x float 0.05
 right_eye_z float -0.05
 right_eye_yaw float 0.3
 center_eye_z float -0.05
End
BeginBaseApp
# this is how you get around in flatland (you are inside the Vessel)
 name string Vessel
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libDodecahedronVessel.so
 connect string TrackerClient
 universe string standard
 nparams int 1
 y float -0.6
End
BeginBaseApp
# graphics version of the console in the UNM vis-lab
 name string Console
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libconsole.so
 connect string Vessel
 universe string standard
 nparams int 1
 y float -0.14
End
BeginBaseApp
# This provides access to locomotion tracking, i.e. this lets the 
# vessel drive around in the world
 name string LocomotionClient
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libMouseKeyboardLocomotion.so
 connect string TrackerClient
 universe string standard
 nparams int 12
 velocity_scale float 0.25
 rotation_scale float 0.1
 start_x float 50.0
 start_y float 20.0
 start_z float 65.0
 x float 0.0
 y float 0.0
 z float 0.0
 roll float 0.0
 pitch float 0.0
 yaw float 0.0
 joystick_device string /dev/input/js0
End
BeginBaseApp
# This handles the transformations between the Vessel and the Earth
 name string VesselTransformationNode
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libTransformationNode.so
 connect string LocomotionClient
 universe string standard
 nparams int 10
# give the vessel a default position and orientation
 x float 0.0
 y float 15.0
 z float 35.0
 roll flaot 0.0
 pitch float 0.0
 yaw float 0.0
# specify where position data is to be obtained
 tracker_client string LocomotionClient
 transducer int 0
 move_child int 0
 use_tracking int 1
End
BeginBaseApp
# this is the basic environment you work in
 name string Earth
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libearth.so
 connect string VesselTransformationNode
 universe string standard
 nparams int 1
 airport_fn string $(FL_DIR)/modules/Earth/Airport2.txt
End
BeginBaseApp
# This handles the transformations between the RightWand and the Vessel
 name string RightWandTransformationNode
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libTransformationNode.so
 connect string TrackerClient
 universe string standard
 nparams int 10
# give the wand a default position
 x float 0.35
 y float -0.65
 z float -0.2
 roll float 0.0
 pitch float 0.0
 yaw float 0.0
# specify what tracker to use
 tracker_client string TrackerClient
 transducer int 1
 move_child int 1
 use_tracking int 1
End
BeginBaseApp
# This is the Right Wand
 name string RightWand
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libWand.so
 connect string RightWandTransformationNode
 universe string standard
 nparams int 10
# specify where the files with the geomety of the wands are.
 right_hand_data string $(FL_DIR)/modules/Wand/RightHand.dat
 left_hand_data string $(FL_DIR)/modules/Wand/LeftHand.dat
 handle_data string $(FL_DIR)/modules/Wand/WandHandle.dat
 head_data string $(FL_DIR)/modules/Wand/WandDefaultHead.dat
# specify the hand to use (right)
 hand int 1
# specify the head to display on the wand (only default right now)
 head int 0
# tell the wand where it can find information about its buttons
 button_client string ButtonClient
 top int 4
 middle int 5
 bottom int 3
End
BeginBaseApp
# This handles the transformations between the LeftWand and the Vessel
 name string LeftWandTransformationNode
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libTransformationNode.so
 connect string TrackerClient
 universe string standard
 nparams int 10
# give the wand a default position
 x float -0.35
 y float -0.65
 z float -0.2
 roll float 0.0
 pitch float 0.0
 yaw float 0.0
# specify what tracker to use
 tracker_client string TrackerClient
 transducer int 2
 move_child int 1
 use_tracking int 1
End
BeginBaseApp
# This is the Left Wand
 name string LeftWand
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libWand.so
 connect string LeftWandTransformationNode
 universe string standard
 nparams int 10
# specify where the files with the geomety of the wands are.
 right_hand_data string $(FL_DIR)/modules/Wand/RightHand.dat
 left_hand_data string $(FL_DIR)/modules/Wand/LeftHand.dat
 handle_data string $(FL_DIR)/modules/Wand/WandHandle.dat
 head_data string $(FL_DIR)/modules/Wand/WandDefaultHead.dat
# specify the hand to use (left)
 hand int -1
# specify the head to display on the wand (only default right now)
 head int 0
# tell the wand where it can find information about its buttons
 button_client string ButtonClient
 top int 1
 middle int 2
 bottom int 0
End

# Description: Clamps the frame rate to a set value.  Can be adjusted on the
# fly, or disabled at run-time.
BeginBaseApp
 name string Constrate
 build_dir string $(FL_DIR)/usr_modules/ConstRate/
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libConstRate.so
 connect string CenterOfTheUniverse
 universe string standard
 nparams int 2
 fps float 20.0
 clamping int 1
End

# Description: Faceplate:  Draws a Faceplate with various nifty information in
# front of the camera.  Can have messages sent to it for display, etc.
# NOTE: does not function properly in a stereoscopic environment.  For stereo,
# use FacePlate2.
BeginBaseApp
 name string FacePlate
 builddir string $(FL_DIR)/usr_modules/FacePlate/
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libFacePlate.so
 connect string Head
 universe string standard
 nparams int 1
 reticule int 0
End

# Description: this provides stars in the sky
BeginBaseApp
#BeginUserApp
 name string Stars
 build_dir string $(FL_DIR)/usr_modules/RealStars/
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libRealStars.so
 connect string Earth
 universe string standard
 nparams int 3
 dome_radius float 6000.0
 star_file string $(FL_DIR)/usr_modules/RealStars/stars_6.dat
 star_radius float 20.0
End

# Description: A simple particle simulator
BeginBaseApp
#BeginUserApp
 name string ParticleEngine
 build_dir string $(FL_DIR)/usr_modules/ParticleEngine/
 dllloc string $(FL_DIR)/lib/$SYSNAME
 dllname string libParticleEngine.so
 connect string Earth
 universe string standard
 nparams int 41
 step_percent float 0.1
# 0 for cube, 1 for sphere
 shape int 0
# Maximum particles in existance.
 max_particles int 500
# Positive value gives a trail of smaller particles behind the main particle.
 trail_length int 3
# Number of particles to create per cycle max.
 part_per_cyc int 15
# Lifespan of particles
 lifespan float 6.0
# Deviation of lifespan for particles.
 lifespan_dev float 0.5
 start_size float 0.25
 end_size float 1.0
# Speed of particles.
 speed float 2.05
# Deviation of speed for particles.
 speed_dev float 0.25
# Starting position (on platform right now)
 position_x float 3.0
 position_y float 0.0
 position_z float 3.0
# Position deviation (on platform right now)
 dev_x float 0.25
 dev_y float 0.25
 dev_z float 0.25
# Starting color
 start_red float 1.0
 start_green float 0.0
 start_blue float 0.0
# Ending color
 end_red float 0.0
 end_green float 0.0
 end_blue float 1.0
# Dispersion direction (general starting velocity)
 dispersion_x float 0.0
 dispersion_y float 1.0
 dispersion_z float 0.0
# Deviation from dispersion direction
 disp_dev_x float 1.0
 disp_dev_y float 1.0
 disp_dev_z float 1.0
# A good gravity setting is 0.0000005 (for fast animation rates)
 gravity_x float 0.0
 gravity_y float 0.05
 gravity_z float 0.0
# Bounce is a percentage negative multiplier to velocity when ceiling or floor
# is hit.  So an object w/ velocity -2.0 hitting a bounce 0.5 would change to
# velocity 1.
# Bounce should be based off of speed somehow.  Go for what looks good.
 bounce_perc_x float 0.0
 bounce_perc_y float 1.0
 bounce_perc_z float 0.0
# Ceiling for particles
 ceiling_x float 50.0
 ceiling_y float 50.0
 ceiling_z float 50.0
# Floor for particles
 floor_x float 0.0
 floor_y float 10.0
 floor_z float 0.0
End


EOF

Note: The parameters passed to the App DLLs must be placed in the section after the 
declaration of the number of parameters. That is, after the "nparams int 4" type
statement. In addition, the parameters must be the last set of entries in the App
section. No other types of declarations are permitted after the app parameters.
The name of the parameter maybe anything, var# is only an example. 

TPC 1/12/00
